27/03: Primera toma de contacto con las oficinas y personal de la empresa, incluyendo alumnos de prácticas
procedentes de otros centros educativos. Sesión introductoria de bienvenida vía Teams con una de las figuras
responsables del área de RRHH y configuración de los equipos informáticos individuales.

28/03: Primer día completo de trabajo. Reunión vía Teams con todos los alumnos de prácticas y tutores
involucrados en el mismo proyecto, dónde se nos explicaron las pautas básicas de trabajo y el plan a seguir
durante nuestra estancia en la empresa. Realización de los cursos de capacitación ética propios de la empresa.

29/03; Finalización de la capacitación ética para dar ya inicio a los cursos de formación técnica, comenzando 
con un curso básico de 70min sobre Git, GitHub y Gitflow. Descarga e instalación de Git y utilización del terminal Git bash para la gestión de repositorios en GitHub a través de comandos. Descarga e instalación de Android Studio.

30/03: Inicio de un curso básico en Android Studio con Kotlin de 9hrs de duración. Comprensión de la estructura y funcionalidades básicas de Android Studio y asimilación de conceptos básicos de sintaxis en Kotlin como la gestión de valores y variables, la creación de funciones, la comprensión de la nulabilidad, el uso de estructuras.
if-else/when y la creación de arrays y listas.

31/03: Descarga e instalación de Sourcetree, sw similar a GitHub Desktop que permite la gestión de repositorios
a través de una interfaz gráfica de usuario (GUI). Continuación con el curso: creación de Activitys en Android Studio para la gestión de pantallas, con una clase para la gestión de los componentes visuales (.xml) y otra para la lógica de la aplicación (.kt). Desarrollo de una primera app básica.

03/04: Continuación con el curso: creación de un menú con botones para acceder a las distintas funcionalidades y navegar entre pantallas. Desarrollo de una aplicación completa que calcule el IMC a partir de unos parámetros
de entrada, gestionados mediante interfaz gráfica, y muestre los resultados en una segunda pantalla cuando el
usuario lo solicite

04/04: Continuación con el curso: comienzo del despliegue de una aplicación de To Do para la gestión de tareas
personales. Desarrollo de la interfaz gráfica y parte de la lógica; implementación de RecyclerViews para el mostrado de ítems y un Dialog para la creación de tareas. Hincapié en el uso de buenas prácticas para la optimización del código, como la definición de estilos, colores y string en los archivos de recursos

05/04: Terminación de la primera parte del curso y de la App de To Do: implementación de un filtro para obtener
las tareas en función de las categorías seleccionadas. Inicio de la segunda parte del curso: implementación
de un binding como forma alternativa de acceder a las vistas (.xml) desde sus Activities (.kt). Conceptos básicos sobre APIs e inserción de las dependencias de Retrofit, que será la herramienta empleada para llamar a la API

11/04: Inicio de la segunda parte del curso de Android Studio con Kotlin. Desarrollo de una aplicación que integra un buscador de superhéroes y extrae datos de una API: generar binding(s) para gestionar el acceso a las vistas de los .xml de manera más rápida, realización de peticiones a una API a través de la librería Retrofit, utilización de editores JSON para el formateo de la respuesta de la API, ejecución de código en hilos secundarios para la optimización de la app, creación de data class(es) para el almacenamiento de los datos extraídos de la API y mostrado de estos en las vistas de la app, cargar imágenes desde una URL a través de la librería PIcasso...

12/04: Continuación con el curso. Desarrollo de una pantalla de ajustes con persistencia de datos e incorporación
de funcionalidades como el modo oscuro/claro: persistencia de datos para preservar la configuración de ajustes
a través de DataStore, que funciona como una especie de BD a nivel local que almacena información a través de
pares clave-valor. Adaptación del diseño a los estándares establecidos en Material Designs, inclusión de
imágenes vectoriales, uso de funciones de extensión con delegados, empleo de corrutinas para aligerar la carga de 
trabajo del hilo principal, uso del operador Elvis para el control de nulos...

13/04: Realización de los nuevos cursos de ética (2) subidos a la plataforma myLearning. Inicio de la formación
de nivel intermedio en Android Studio con Kotlin. Visualización de los dos primeros y puesta en práctica de los
conceptos abarcados: Despliegue de una arquitectura MVVM con LIVE DATA, implementación de dependencias y 
ViewBinding; incorporación al proyecto de la meta-arquitectura Clean Architecture, implementación de Retrofit 2
para la extración de datos de una API web y uso de corrutinas para la optimización de la gestión de recursos
a nivel de CPU

14/04: Culminación de la nueva formación ética y visualización de los dos últimos vídeos del curso intermedio
de Android Studio con Kotlin. Puesta en práctica de la inyección de dependencias con Dagger Hilt y despliegue
de Room; un ORM que simplifica la integración de una BD en nuestra App, permitiéndonos almacenar a nivel local
toda la información que necesitemos de la API web, utilización de mappers y funciones de extensión para la conversión de modelos de datos...

17/04: Visualización de un vídeo de refuerzo sobre RecyclerView; concepto de Data Class, Adapter, ViewHolder, funciones lambda y empleo de Toast. Conexión de un dispositivo móvil a Android Studio mediante USB para prescindir del emulador y ahorrar recursos. Inicio de la App individual en Android Studio. Elección de APIs (Harry Potter),
planteamiento del proyecto y despligue de la estructura base siguiendo los principios de la arquitectura MVVM
y Clean Architecture. Implementación de todas las dependencias que se irán utilizando a lo largo del proyecto: 
ViewModel, LiveData, Activity, Retrofit, Corrutinas, Dagger Hilt, Room, Picasso...

18/04: Continuación con la App de HarryPotter: implementación del primer modelo de datos completo (Book) para la extracción de datos desde la API,
inserción en BD local con Room y gestión de dichos datos a nivel de la propia aplicación (UI: View/ViewModel). Utilización de funciones de extensión
para la conversión entre modelos

19/04: Asistencia a un evento en las oficinas de la empresa, que se estructuró en dos partes: 
1. Charla de concienciación sobre la importancia de saber venderse de cara a las empresas y tener un perfil profesional bien trabajado en redes sociales, poniendo especial foco en Linkedin
2. Prompt A Thon: competición en grupos de 5 personas, y entre todos los alumnos de prácticas de la empresa, donde el objetivo era generar una pila de imágenes que representasen un entorno profesional (oficicinas, logos...) y evocasen los valores de Accenture, a través del uso de IAs de generación de
imágenes tales como DALLE, Stable Difussion, Crayon, DreamStudio... La idea era partir de un prompt básico e ir refinandolo progresivamente para
obtener mejores resultados, hasta conseguir obtener un patrón que fuese capaz de generar imágenes de calidad que se ajustasen al objetivo

20/04: Continuación con la App de HarryPotter: implementación de los modelos de datos completos para Character, Wand y Spell: llamadas a la API,
inserción en BD con Room y consultas a la BD para hacer uso de la info. a nivel de aplicación.
Configuración, a nivel de BD, de la relación entre Character y Wand y uso de funciones de extensión para la conversión entre modelos

21/04: Continuación con la App de HarryPotter: implementación del modelo de datos completo para Species: llamada a la API, inserción en BD con Room y
consultas a la BD para hacer uso de la info. a nivel de aplicación. Utilización de funciones de extensión para la conversión entre modelos. 
Comienzo con la primera pantalla de la interfaz: inserción de un bottomNavigationBar para gestionar la navegación entre distintos Fragments dentro
de una misma Activity

24/04: Continuación con la App de HarryPotter: diseño y desarrollo del primer fragment vinculado a la consulta
de libros (Books): despliegue del layout, inserción del buscador (SearchView), filtros (A-Z, Z-A), funcionalidad
de favoritos y botones para el desplazamiento instantáneo hacia el inicio/fin del listado de ítems (RecyclerView).
Implementación del RecyclerView con imagen y detalles de los Books haciendo uso de la información de la API
almacenada localmente en Room. Inclusión de toda la lógica de negocio en el ViewModel, respetando los ppos MVVM.

25/04: Continuación con la App de HarryPotter: diseño y desarrollo del segundo fragment vinculado a la consulta
de personajes (Characters): despliegue del layout, inserción del buscador (SearchView), filtros (A-Z, Z-A), funcionalidad de favoritos y botones para el desplazamiento instantáneo hacia el inicio/fin del listado de ítems (RecyclerView). Implementación del RecyclerView con imagen y detalles de los Characters haciendo uso de la información de la API almacenada localmente en Room. Inclusión de toda la lógica de negocio en el ViewModel, respetando los principios de arquitectura MVVM.

26/04: Continuación con la App de HarryPotter: diseño y desarrollo del tercer fragment vinculado a la consulta
de Hechizos (Spells): despliegue del layout, inserción del buscador (SearchView), filtros (A-Z, Z-A), funcionalidad de favoritos y botones para el desplazamiento instantáneo hacia el inicio/fin del listado de ítems (RecyclerView). Implementación del RecyclerView con imagen y detalles de los Spells haciendo uso de la información de la API almacenada localmente en Room. Inclusión de toda la lógica de negocio en el ViewModel, respetando los principios de arquitectura MVVM.

27/04: Continuación con la App de HarryPotter: diseño y desarrollo del cuarto fragment vinculado a la consulta
de Especies (Species): despliegue del layout, inserción del buscador (SearchView), filtros (A-Z, Z-A), funcionalidad de favoritos y botones para el desplazamiento instantáneo hacia el inicio/fin del listado de ítems (RecyclerView). Implementación del RecyclerView con imagen y detalles de las Species haciendo uso de la información de la API almacenada localmente en Room. Inclusión de toda la lógica de negocio en el ViewModel, respetando los principios de arquitectura MVVM.

28/04: Continuación con la App de HarryPotter: implementación del registro y login con Firebase y refinado de la aplicación, tanto a nivel de estética de interfaz como de código. Implementación de cuadros de diálogo y Toasts para la transmisión de feedback al usuarios, en caso de errores durante el registro o login, refactorización del código para solidificar la estructura del proyecto, simplificación del código, dotación de una mayor uniformidad al mismo, control de errores e inclusión de barras de progreso para notificar la carga de procesos, como p.e al abrir
la aplicación o realizar búsquedas personalizadas, migración de la lógica al ViewModel...

02/05: Preparación de la presentación de la aplicación: refinamiento final y correción de errores menores. Limpieza definitiva de código y planteamiento del esquema a seguir durante la presentación para abarcar las funcionalidades básicas de la apps y los aspectos de programación más reseñables. Tras finalizar la presentación, comienzo con la
formación en Flutter: visualización del vídeo introductorio

03/05: Continuación con la formación en Flutter, visualización de los capítulos 1, 2, 3 y 4: introducción a las cuentas de desarrollador, tanto en Android como iOS, con las perspectiva de publicar aplicaciones en la Play Store y App Store, respectivamente; Setup del entorno de desarrollo, descarga e instalación de Visual Studio Code como editor de código, instalación del Framework de Flutter y su SDK, configuración de las variables de entorno...; introducción elemental al lenguaje de programación Dart, tipos de datos, estructuras de control (if, else), bucles,
listas, maps y colecciones

04/05: Continuación con la formación en Flutter, visualización de los capítulos 5, 6, 7 y 8: control de la nulabilidad en Dart, uso del operador Elvis, concepto de enumeraciones, clases y objetos. Introducción de aspectos más avanzados como los tipos Future, las funciones asíncronas o el uso de la palabra clave 'await', estrechamente ligados al tratamiento de datos como las llamadas a BD o APIs. Explicación de como crear y configurar un proyecto en Flutter y de su estructura básica de archivos, así como de sus diferencias con otros IDE como Android Studio para el desarrollo móvil (IDE especializado vs Framework multiplataforma)

05/05: Continuación con la formación en Flutter, visualización de los capítulos 10, 11, 12 y 13: configuración de proyectos orientados a la plataforma de Android + comprensión del funcionamiento de Flutter para la generación de dichas aplicaciones (compilación a partir del Gradle y generación de un archivo .apk la ejecución nativa en un dispositivo Android), uso del software scrcpy, introducción a Firebase como herramienta nuclear para la implementación del login y parte del backend (inserción de dependencias), implementación de una pantalla básica de registro de la vista del login

08/05: Continuación con la formación en Flutter, visualización de los capítulos 14, 15, 16, 17: separación de la pantalla de registro con la de login, repaso sobre conceptos básicos de Git (software) y GitHub (repositorio remoto): uso de comandos a partir de la terminal integrada de VSCode para la gestión de las versiones de nuestros proyectos y su publicación en nuestro repositorio remoto de GitHub para salvaguardar los avances; implementación de una pantalla para la verificación de email y configurar el enlace para permitir la navegación entre las pantallas de login y registro

09/05: Continuación con la formación en Flutter, visualización de los capítulos 18, 19, 20, 21: implementar la vista de notas y agregar en ella la funcionalidad para el logout del usuario, habilitar la navegación entre las vistas de login y notas, y refinar todo lo referente al enrutado, creando un archivo independiente donde se incluyan las distintas rutas. Manejo de excepciones en la vista de login: comprensión de las mismas y creacción de excepciones propias para el tratamiento específico de las mismas a través de sus códigos de 'error'

10/05: Continuación con la formación en Flutter, visualización de los capítulos 22, 23, 24, 25: manejo de excepciones en la vista de registro incorporando la misma filosofía que en el login, gestionar la lógica de navigación entre vistas a través de la inclusión de botones que conecten unas pantallas con otras. Comprobación de la verificación del email del usuario antes de su envío a la vista de notas. Separación de la lógica del registro, login y autenticación de la interfaz de usuario (UI) a través de la creacción de un 'Auth Service' que funcione como una capa independiente que englobe toda la lógica y comunicación con el proveedor de autenticación (Firebase en este caso). Creación de una interfaz a modo de clase padre de la que hereden los distintos proveedores.

11/05: Continuación con la formación en Flutter, visualización de los capítulos 26, 27 y 28: comprensión de la utilidad de los distintos tipos de tets para verificar la correcta funcionalidad de nuestra aplicación. Realización de tests unitario para probar el correcto funcionamiento de nuestro 'Auth Service'. Implementación de los métodos CRUD para el tratamiento de datos a nivel local (SQLite): inserción, lectura, actualización y borrado de notas, encapsulando la lógica en una capa de abstracción llamada 'Notes Service'. Incorporación del conceptos de Stream para el tratamiento de flujos de datos (p.e: nuestro listado de notas en actualización constante)

12/05: Continuación con la formación en Flutter, visualización de los capítulos 29, 30, 31, 32, 33: configurar la vista de notas para que muestre todas las notas pertenecientes al usuario en cuestión, implementación de las funcionalidades para el agregado y borrado de notas a través de la comunicación con nuestro métodos CRUD que están en contacto directo con nuestro almacenamiento local en SQLite, realizando contra la BD todas las operaciones que el usuario demanda, incluida la actualización del listado actual de notas a través de un Stream

15/05: Continuación con la formación en Flutter, visualización de los capítulos 34, 35, 36, 37: implementación de la funcionalidad para actualizar notas a través de nuestro servicio CRUD. Agregar la seguridad necesarias al 
'Notes Service' para que cada usuario solamente tenga acceso a sus propias notas e introducción al almacenamiento en la nube a través de CloudFirestore, implementación de dependencias y remodelado del sistema de almacenamiento
de de los datos, pasando de un modelo SQL (SQLite) a un modelo no relacional (Cloud Firestore), basado en colecciones de documentos

16/05: Continuación con la formación en Flutter, visualización de los capitulos 38, 40, 41, 42:

18/05: Continuación con la formación en Flutter, visualización de los capítulos 43, 44, 45, 46:

19/05: Continuación con la formación en Flutter, visualización de los capítulos blablabl + API calls:










